// Quick defs
let a = 1
let b = 2
let c = 3
let d = 4
let f = 6
let g = 7
let numList = [1,2,3]
let pointList = [(1,1),(2,3),(5,8),(6,7)]

// Individuals
let get1 = numList[a]
let get2 = pointList[3]
let get3 = [5,6,7][2]
let memb1 = (4,4).x
let memb2 = get2.y
let func1 = cos(1)
let func2 = atan(a,b)
let unaryPlus = +func1
let unaryMinus = -func1
let booleanNot = not true
let power1 = 2^3
let power2 = 2^3^2
let mult1 = 2*56
let mult2 = 32/4
let mult3 = 18%4
let add1 = 2+8
let add2 = 1-7
let rel1 = 5 >= 2
let rel2 = 5 > 2
let rel3 = 5 <= 2
let rel4 = 5 < 2
let rel5 = 5 == 2
let rel6 = 5 != 2
let relChain1 = a < b < c
let relChain2 = a < b <= c == d >= e > f != g
let and1 = true and true
let or1 = true or false
let identifier = power1
let literal = 123.456
let piecewise1 = {a > 5: 4}
let piecewise2 = {and1: 1, or1: 2, a >= 2: 3}
let piecewise3 = {
  rel4: 5,
  a > b: 6,
  mult1 == 112: 7,
  otherwise: 8,
}
let parenthesized = (1+2*3)

// Precedence/integration tests
// Please do not smush together all of your expressions like this
let prec0 = 1<2 and 3<4
let prec1 = 1-2*3^3^2%9/2
let prec2 = +2+5*6-3/2%2^(4+(-4))
let prec3 = 1+2*3>6>1+2 and 1<8<1+8
let prec4 = true and true or false and false
let prec5 = 1>0 and 1>2 or 0<1 and 1>0 or {8>5:1,otherwise:3}>2 or not true and false
// let prec6 = a[b].c.d[e]
