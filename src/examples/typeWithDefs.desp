type Complex@{
  real: Num,
  imag: Num,
}
// Complex -> Num
def mag(z:Complex) = sqrt(z.real^2+z.imag^2)

// (Complex, Complex) -> Complex
// Asterisk indicates inline
def _add*(z1:Complex, z2:Complex) = Complex@{
  real: z1.real+z2.real,
  imag: z1.imag+z2.imag,
}

// Num -> Complex
def expi(theta:Num) = Complex(
  cos(theta),
  sin(theta),
)

let a = Complex(3, 4)
let b = Complex(5, 2)
// c should be 3
let c = a.real
// d should be sqrt(3^2+4^2)=5
let d = mag(a)
let f = a+b
// g should be sqrt(8^2+6^2)=10
let g = mag(f)
let expipi = expi(pi)
let k = Complex(1,2)+Complex(4,5)

type Point3D@{
  x: Num,
  y: Num,
  z: Num,
}

def mag(p:Point3D) = sqrt(p.x^2+p.y^2+p.z^2)

let h = Point3D(3, 4, 12)
// h should be distance of point (3,4,12) from origin, = sqrt(3^2+4^2+12^2)=13
let j = mag(h)
