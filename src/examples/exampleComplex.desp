type Complex@{
  real: Num,
  imag: Num,
}

def magsq(z:Complex) = z.real^2+z.imag^2
// TODO: change this to _abs (& implement _abs)
def mag(z:Complex) = sqrt(z.real^2+z.imag^2)

// TODO: why no work if not inline?
def conj*(z:Complex) = Complex(z.real, -z.imag)

def _add*(z1:Complex, z2:Complex) = default
def _sub*(z1:Complex, z2:Complex) = default
def _mul(z1:Complex, z2:Complex) = Complex(
  z1.real*z2.real - z1.imag*z2.imag,
  z1.real*z2.imag + z1.imag*z2.real,
)
def _mul*(c:Num, z:Complex) = default
def _mul*(z:Complex, c:Num) = default
def _div(c:Num, z:Complex) = Complex(c,0)/z
def _div(z:Complex, c:Num) = default
def _div(z1:Complex, z2:Complex) = z1*conj(z2)/magsq(z2)
def _neg*(z:Complex) = default
def _pos*(z:Complex) = default
// def exp(z:Complex) = e^z.real*Complex(cos(z.imag), sin(z.imag))

let a = Complex(1, 2)
let b = Complex(1, -2)
let i = Complex(0, 1)
let c = mag(b)
let d = conj(a)
let f = a+b
let g = a-b
let h = a*b
let j = 3*b
let k = b*4
let m = a/b
let n = -a
let p = +b
// let q = exp(i)
